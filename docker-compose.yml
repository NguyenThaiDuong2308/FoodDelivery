services:
  postgres:
    image: postgis/postgis:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      retries: 5
    volumes:
      - kafka_data:/bitnami/kafka

  user-service:
#    image: deliverysystem-user-service:latest
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: users
      SERVER_PORT: 8080
      JWT_SECRET: supersecret
      REDIS_ADDRESS: redis:6379
      REDIS_PASSWORD:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: user.events
      SMTP_Host: smtp.gmail.com
      SMTP_Port: 587
      SMTP_Username: 03thaiduong@gmail.com
      SMTP_Password: jppyjcxlxrlcaufy
      SMTP_From: 03thaiduong@gmail.com
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  restaurant-service:
#    image: deliverysystem-restaurant-service:latest
    build:
      context: ./services/restaurant-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: restaurants
      SERVER_PORT: 8081
      JWT_SECRET: supersecret
      REDIS_ADDRESS: redis:6379
      REDIS_PASSWORD:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: user.events
      KAFKA_GROUP_ID: restaurant-service-consumers
      GRPC_PORT: 50051
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  shipper-service:
    build:
      context: ./services/shipper-service
      dockerfile: Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: shippers
      SERVER_PORT: 8082
      JWT_SECRET: supersecret
      REDIS_ADDRESS: redis:6379
      REDIS_PASSWORD:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: user.events
      KAFKA_GROUP_ID: shipper-service-consumers
    ports:
      - "8082:8082"
    depends_on:
      postgres:
          condition: service_healthy
      kafka:
        condition: service_healthy

  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: orders
      SERVER_PORT: 8083
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: order.events
      JWT_SECRET: supersecret
      GRPC_Server_Port: 50051
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy

  shipper-assignment-service:
    build:
      context: ./services/shipper-assignment-service
      dockerfile: Dockerfile
    environment:
      JWT_SECRET: supersecret
      SERVER_PORT: 8084
      REDIS_ADDRESS: redis:6379
      REDIS_PASSWORD:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: order.events
      MAPBOX_TOKEN: pk.eyJ1Ijoibmd1eWVudGhhaWR1b25nIiwiYSI6ImNtZm1kZXQ3ODAwcDgyaXE3MnprZTNnM2sifQ.VRjRwGiuFp342CTc1RXOmQ

    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  kong-postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong:
    image: kong:latest
    restart: always
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
      KONG_PG_PASSWORD: kong
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_API_URI: http://localhost:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      kong-postgres:
        condition: service_healthy

  migrations-manager:
    image: kong:latest
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
      KONG_PG_PASSWORD: kong
    command: >
      sh -c "kong migrations bootstrap &&
      kong migrations up &&
      kong migrations finish"

    depends_on:
      kong-postgres:
        condition: service_healthy
    volumes:
      - ./kong_migrations:/usr/local/share/.kong_migrations
    restart: on-failure

  kong-manager:
    image: kong:latest
    restart: always
    environment:
      KONG_ADMIN_GUI_URI: http://localhost:8002
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-postgres
      KONG_PG_PASSWORD: kong
      KONG_PG_USER: kong
      KONG_ADMIN_GUI_AUTH_CONF_ADMIN_GUI: basic-auth
      KONG_ADMIN_GUI_SESSIONS: on
    ports:
      - "8002:8002"
    depends_on:
      kong-postgres:
        condition: service_healthy
      kong:
       condition: service_healthy

  deck:
    image: kong/deck:latest
    command: gateway sync kong.yaml --kong-addr http://kong:8001
    volumes:
      - ./kong.yaml:/kong.yaml
    depends_on:
      kong:
        condition: service_healthy

  client:
    image: node:latest
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
    - "3000:3000"


volumes:
  redis_data:
  postgres_data:
  kong_data:
  kafka_data:

#Git token: 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
# New token: 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
#192.168.237.128

